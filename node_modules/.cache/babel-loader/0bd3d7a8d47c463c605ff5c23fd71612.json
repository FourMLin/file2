{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = [\"data-text\"];\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  value: \"\",\n  \"data-error\": \"\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = {\n  key: 0,\n  class: \"material-icons is-error\"\n};\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"material-icons g-clean\",\n  onclick: \"var input = this.previousElementSibling; input.value = ''; input.focus();\"\n}, \"highlight_off\", -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = {\n  class: \"g-input-tip\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"g-form-item\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $props.type == 'innerwords' ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass([\"g-form-item\", {\n      'is-error': $props.status == 'error'\n    }])\n  }, [_createElementVNode(\"form\", {\n    class: \"g-input-type\",\n    \"data-text\": $props.text\n  }, [_hoisted_2, $props.status == 'error' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"error\")) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [], 64\n  /* STABLE_FRAGMENT */\n  )), _hoisted_4], 8\n  /* PROPS */\n  , _hoisted_1), _createElementVNode(\"span\", _hoisted_5, _toDisplayString($props.tip), 1\n  /* TEXT */\n  )], 2\n  /* CLASS */\n  )) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6));\n}","map":{"version":3,"mappings":";;;gCAGMA,oBAAuC,OAAvC,EAAuC;EAAhCC,IAAI,EAAC,MAA2B;EAApBC,KAAK,EAAC,EAAc;EAAX;AAAW,CAAvC;;AAAA;;;;EACMC,KAAK,EAAC;;;gCAEZH,oBAC0G,MAD1G,EAC0G;EADpGG,KAAK,EAAC,wBAC8F;EAAxGC,OAAO,EAAC;AAAgG,CAD1G,EACsF,eADtF,EACmG;AAAA;AADnG;;;EAGID,KAAK,EAAC;;;;EAETA,KAAK,EAAC;;;SAV8DE,eAAI,8BAA7EC,oBASM,KATN,EASM;UAAA;IATDH,KAAK,mBAAC,aAAD,EAAc;MAAA,YAAuBE,iBAAM;IAA7B,CAAd;EASJ,CATN,GACEL,oBAMO,MANP,EAMO;IANDG,KAAK,EAAC,cAML;IANqB,aAAWE;EAMhC,CANP,GACEE,YAC4CF,iBAAM,yBAAlDC,oBAA2E,MAA3E,cAA+D,OAA/D,oBACAA,oBAA4BE,SAA5B,EAA4B;IAAAC;EAAA,CAA5B,EAA4B,EAA5B,EAA4B;EAAA;EAA5B,IACAC,WAJF;;EAAA,eAOAV,oBAAwC,MAAxC,cAAwCW,iBAAZN,UAAY,CAAxC,EAA+B;EAAA;EAA/B,EARF;;EAAA,oBAUAC,oBACM,KADN","names":["_createElementVNode","type","value","class","onclick","$props","_createElementBlock","_hoisted_2","_Fragment","key","_hoisted_4","_toDisplayString"],"sourceRoot":"","sources":["D:\\Mywork\\simplemart\\src\\global\\components\\form\\input.vue"],"sourcesContent":["<template>\n  <div class=\"g-form-item\" :class=\"{'is-error' : status == 'error'}\" v-if=\"type == 'innerwords'\">\n    <form class=\"g-input-type\" :data-text=\"text\">\n      <input type=\"text\" value=\"\" data-error>\n      <span class=\"material-icons is-error\" v-if=\"status == 'error'\">error</span>\n      <template v-else></template>\n      <span class=\"material-icons g-clean\"\n        onclick=\"var input = this.previousElementSibling; input.value = ''; input.focus();\">highlight_off</span>\n    </form>\n    <span class=\"g-input-tip\">{{tip}}</span>\n  </div>\n  <div class=\"g-form-item\" v-else>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'FormInput',\n    props: {\n      'type': {\n        type: Object,\n        required: true,\n      },\n      'text': {\n        type: String,\n        required: true,\n      },\n      'tip': {\n        type: String,\n        required: true,\n      },\n      'status': {\n        type: Object,\n        required: true,\n      },\n\n    },\n\n    data() {\n      return {\n        value: ''\n      }\n    },\n    methods: {\n\n    }\n\n  }\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style lang=\"scss\">\n  @import '@/global/scss/footer.scss';\n</style>"]},"metadata":{},"sourceType":"module"}