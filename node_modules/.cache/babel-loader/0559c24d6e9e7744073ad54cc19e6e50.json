{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"g-form-item\"\n};\nconst _hoisted_2 = [\"data-text\"];\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  value: \"\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"material-icons g-clean\",\n  onclick: \"var input = this.previousElementSibling; input.value = ''; input.focus();\"\n}, \"highlight_off\", -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = [_hoisted_3, _hoisted_4];\nconst _hoisted_6 = {\n  class: \"g-input-tip\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [($props.type = _ctx.innerwords) ? (_openBlock(), _createElementBlock(\"form\", {\n    key: 0,\n    class: \"g-input-type\",\n    \"data-text\": $props.text\n  }, _hoisted_5, 8\n  /* PROPS */\n  , _hoisted_2)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"span\", _hoisted_6, _toDisplayString($props.tip), 1\n  /* TEXT */\n  )]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;;;;gCAEPC,oBAA4B,OAA5B,EAA4B;EAArBC,IAAI,EAAC,MAAgB;EAATC,KAAK,EAAC;AAAG,CAA5B;;AAAA;;gCACAF,oBAC0G,MAD1G,EAC0G;EADpGD,KAAK,EAAC,wBAC8F;EAAxGI,OAAO,EAAC;AAAgG,CAD1G,EACsF,eADtF,EACmG;AAAA;AADnG;;oBADAC,YACAC;;EAGIN,KAAK,EAAC;;;uBANdO,oBAOM,KAPN,cAOM,EAN+CC,cAAOC,kCAA1DF,oBAIO,MAJP,EAIO;UAAA;IAJDP,KAAK,EAAC,cAIL;IAJqB,aAAWQ;EAIhC,CAJP;;EAAA,kDAMI,EADJP,oBAAwC,MAAxC,cAAwCS,iBAAZF,UAAY,CAAxC,EAA+B;EAAA;EAA/B,CACI,CAPN","names":["class","_createElementVNode","type","value","onclick","_hoisted_3","_hoisted_4","_createElementBlock","$props","_ctx","_toDisplayString"],"sourceRoot":"","sources":["D:\\Mywork\\simplemart\\src\\global\\components\\form\\input.vue"],"sourcesContent":["<template>\n  <div class=\"g-form-item\">\n    <form class=\"g-input-type\" :data-text=\"text\" v-if=\"type = innerwords\">\n      <input type=\"text\" value=\"\">\n      <span class=\"material-icons g-clean\"\n        onclick=\"var input = this.previousElementSibling; input.value = ''; input.focus();\">highlight_off</span>\n    </form>\n    <span class=\"g-input-tip\">{{tip}}</span>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'FormInput',\n    props: {\n      'type': {\n        type: Object,\n        required: true,\n      },\n      'text': {\n        type: String,\n        required: true,\n      },\n      'tip': {\n        type: String,\n        required: true,\n      },\n\n    },\n\n    data() {\n      return {\n        value:''\n      }\n    },\n    methods: {\n      \n    }\n\n  }\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style lang=\"scss\">\n  @import '@/global/scss/footer.scss';\n</style>"]},"metadata":{},"sourceType":"module"}